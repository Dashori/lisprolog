:- use_module(library(dif)).	% Sound inequality
:- use_module(library(clpfd)).	% Finite domain constraints
:- use_module(library(clpb)).	% Boolean constraints
:- use_module(library(chr)).	% Constraint Handling Rules
:- use_module(library(when)).	% Coroutining
:- use_module(library(clpq)).  % Constraints over rational numbers
:- use_module(library(atom)).
:- use_module(library(persistency)).


:- dynamic(country/1).

country('канада').
%country('россия').
%country('сша').
%country('китай').


ask_country(UserCountry) :-
    country(Country),
    format("Ваш персонаж из страны ~w? (да/нет)", [Country]),
    read(Answer),
    (   Answer = да -> UserCountry = Country, !;   
        Answer = нет -> fail;
        write("Введите ответ да или нет."), nl,
        ask_country(UserCountry)
    ).

ask_unknown_country(Country) :-
    write("К сожалению мой список стран пока маленький"), nl,
    write("Из какой страны ваш персонаж? "), nl,
    read(Answer),
    Country = Answer,
    assertz(country(Country)).

get_user_country(UserCountry) :-
    (ask_country(UserCountry), !;  ask_unknown_country(UserCountry)).


person('Leonardo', 'DiCaprio', 'male', 48, 'сша', 'актер', true).
person('Dasha', 'Chepigo', 'female', 21, 'россия', 'студент', 'true').
person('Sergey', 'Shnurov', 'male', 50, 'россия', 'музыкант', 'true').
person('Sergey1', 'Shnurov1', 'male', 50, 'россия', 'музыкант', 'true').
person('Sergey2', 'Shnurov2', 'female', 50, 'россия', 'музыкант', 'true').

iterate(List) :-
    iterate_helper(List).

iterate_helper([], X) :- 
    X = нет
.
iterate_helper([Item | Rest], X) :-
    write("Я думаю, что это: "),
    write(Item), 
    nl,
    repeat,
    write('Я прав? (да/нет) '),
    read(Response),
    (Response == нет ->
        !, iterate_helper(Rest, X), X = нет;
        true, X = да).


start :-
    write("Добро пожаловать в акинатор.\nЗагадайте персонажа, а я попытаюсь его отгадать!\n"),
    write("Только вводите все слова с маленькой буквы, так как я еще не умею в большие и ставьте точки.\n"),

    guess(Gender, Age, Country, Profession, IsAlive),

    findall( (Name1, Surname1), (person(Name1, Surname1, Gender2, NewAge, Country2, Profession2, IsAlive2), 
    NewAge =< Age, NewAge > Age - 10, Gender = Gender2, IsAlive = IsAlive2, Country = Country2,
    Profession = Profession2), 
    List),

    iterate_helper(List, X),
    (
        X = да, write('Спасибо за игру!');
        X = нет, write('К сожалению я не смог угадать вашего персонажа'), nl,
        write('Введите имя кого вы загадывали:'),
        read(Name),
        write('Введите фамилию кого вы загадывали:'),
        read(Surname),
        assertz(person(Name, Surname, Gender, Age, Country, Profession, IsAlive)),
        write('Ваш персонаж добавлен в базу знаний!'), nl
    ).

:- dynamic person/7.

guess(Gender, Age, Country, Profession, IsAlive) :-
    ask_IsAlive(IsAlive),
    ask_gender(Gender),
    get_user_country(Country),
    is_greater(10, Age),
    get_user_profession(Profession).

get_ask_IsAlive(IsAlive) :-
    ask_IsAlive(IsAlive),
    write(IsAlive).


ask_IsAlive(IsAlive) :-
    write('Ваш персонаж жив сейчас? (да/нет)'),
    read(Answer),
    (   Answer = 'да' -> IsAlive = true, true, !;   
        Answer = 'нет' -> IsAlive = false, true, !;
        write("Введите ответ да или нет."), nl,
        ask_IsAlive(IsAlive)
    ), !.


ask_gender(Gender) :-
    write('Ваш персонаж мужского пола? (да/нет)'),
    read(Answer), 
    (   Answer = да -> Gender = 'male';   
        Answer = нет -> Gender = 'female';
        write("Введите ответ да или нет."), nl,
        ask_gender(Gender)
    ).

print:-
    listing(person/7),
    listing(country/1),
    listing(profession/1).


is_greater(X, Next) :-
    write('Ваш персонаж старше '),
    write(X),
    write('? (да/нет)'),
    read(Response),
    (   Response = нет, Next = X; 
        (X = 110 , Response \= да)
        %Response = да -> true, !;
        %write("Введите ответ да или нет."), nl,
        %is_greater(X, Next)
    ), !.
    
is_greater(X, Next2) :-
    Next is X + 10,
    is_greater(Next, Next2).


:- dynamic(profession/1).

profession('музыкант').
profession('актер').
%profession('политик').
profession('студент').

ask_profession(UserProfession) :-
    profession(Profession),
    format("Ваш персонаж по профессии ~w? (да/нет)", [Profession]),
    read(Answer),
    (   Answer = да -> UserProfession = Profession, !;   
        Answer = нет -> fail;
        write("Введите ответ да или нет."), nl,
        ask_profession(UserProfession)
    ).

ask_unknown_profession(Profession) :-
    write("Кто ваш персонаж по профессии? "), nl,
    read(Answer),
    Profession = Answer,
    assertz(profession(Profession)).

get_user_profession(UserProfession) :-
    (ask_profession(UserProfession), !;  ask_unknown_profession(UserProfession)).

print_all :- 
    listing.


save(Filename) :-
    open(Filename, write, Stream),
    set_output(Stream), % Перенаправляем вывод на этот поток
    listing, % Выводим всю базу знаний
    set_output(user_output), % Вернуть вывод на стандартный поток вывода
    close(Stream). % Закрываем файл

load(Filename) :-
    consult(Filename),
    dynamic(country/1),
    dynamic(profession/1),
    dynamic(person/7).
